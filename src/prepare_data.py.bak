cp src/prepare_data.py src/prepare_data.py.bak 2>/dev/null || true
cat > src/prepare_data.py <<'PY'
import numpy as np, struct, pathlib, sys

ROOT = pathlib.Path(__file__).resolve().parents[1]
OUT  = ROOT / "data"
OUT.mkdir(parents=True, exist_ok=True)

FILES = {
    "base": (OUT/"sift_base.fvecs",        516000000, 128, "fvecs"),
    "query":(OUT/"sift_query.fvecs",         5160000, 128, "fvecs"),
    "gt":   (OUT/"sift_groundtruth.ivecs",   4040000, 100, "ivecs"),
}

def validate():
    ok = True
    for name,(p,expect_bytes,expect_dim,kind) in FILES.items():
        if not p.exists():
            print(f"[ERROR] Missing file: {p}")
            ok = False
            continue
        size = p.stat().st_size
        if size != expect_bytes:
            print(f"[ERROR] {p} has {size} bytes; expected {expect_bytes}. (Corrupted/partial download)")
            ok = False
            continue
        with open(p,"rb") as f:
            d = struct.unpack("i", f.read(4))[0]
        if d != expect_dim:
            print(f"[ERROR] {p} header dim={d}; expected {expect_dim}.")
            ok = False
    return ok

def read_fvecs(path: pathlib.Path) -> np.ndarray:
    with open(path, "rb") as f: buf = f.read()
    dim = struct.unpack_from("i", buf, 0)[0]
    arr = np.frombuffer(buf, dtype=np.float32, offset=4).reshape(-1, dim + 1)[:, 1:]
    return arr.astype(np.float32)

def read_ivecs(path: pathlib.Path) -> np.ndarray:
    with open(path, "rb") as f: buf = f.read()
    dim = struct.unpack_from("i", buf, 0)[0]
    arr = np.frombuffer(buf, dtype=np.int32).reshape(-1, dim + 1)[:, 1:]
    return arr.astype(np.int32)

if __name__ == "__main__":
    if not validate():
        print("\nFix the raw files in data/ and run again. Expected sizes:\n"
              "  sift_base.fvecs        516000000 bytes (dim=128)\n"
              "  sift_query.fvecs         5160000 bytes (dim=128)\n"
              "  sift_groundtruth.ivecs   4040000 bytes (dim=100)")
        sys.exit(1)
    xb = read_fvecs(OUT/"sift_base.fvecs")
    xq = read_fvecs(OUT/"sift_query.fvecs")
    gt = read_ivecs(OUT/"sift_groundtruth.ivecs")
    np.save(OUT/"xb.npy", xb)
    np.save(OUT/"xq.npy", xq)
    np.save(OUT/"gt.npy", gt)
    print("Saved data/*.npy")
PY
